
==================== FINAL INTERFACE ====================
2017-12-13 21:45:56.319176 UTC

interface DFS-0.1.0.0-7idFxpKHsOVL8Ht6XDP4lR:Client 8002
  interface hash: 8d12927afea0505773c4642f87b1d4e3
  ABI hash: 6661f4d7539e0eb6653c332d7be743ba
  export-list hash: d8edd7469e88b2e6b2c0c554fcaa0530
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4c0aadf0f65e559a2bd2b36fba2fd9f6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Client.appendFileandCache
  Client.appendFileandClose
  Client.awaitUpdate
  Client.closeFileonServer
  Client.lockFile
  Client.openSocket
  Client.portNumLocking
  Client.readFileandCache
  Client.readFromTerminal
  Client.replaceOrAppend
  Client.requestLock
  Client.runConn
  Client.runUpdate
  Client.sendClose
  Client.updateFile
  Client.writeFileandClose
  Client.writeNewFileandCache
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      time-1.6.0.1@time-1.6.0.1 unix-2.7.2.1@unix-2.7.2.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.1.0:Control.Concurrent 2ee6a0a58489520b9a96d8fef10380fa
import  -/  base-4.9.1.0:Control.Exception a76dd9666251322fe34dbcca3a0817bf
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Control.Monad.Fix 1847625fb543f2f5c2510a02760c6b1a
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Typeable 9257e47d10882145c67c5b489965cfb7
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Conc.Sync 8d0a228e5fc4d8c110495066f4d52ea1
import  -/  base-4.9.1.0:GHC.IO.Handle ba98a5b34d78cbf48b41fe58a3735c69
import  -/  base-4.9.1.0:GHC.IO.Handle.FD bf0291e0f2b6c0eca5446f986999f1cc
import  -/  base-4.9.1.0:GHC.IO.Handle.Text b65719f3b262b071ab1aabeb72fc9d8b
import  -/  base-4.9.1.0:GHC.IO.Handle.Types 17aa0e2ab137800e3a31992d780c071f
import  -/  base-4.9.1.0:GHC.IO.IOMode 2f5782f93b12a0d860d6d661b9fb405c
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Exit 068ba078eb20417d7af66db8b8ab4db1
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 0fd5c8559af8bc4b6f38b9cf9ba5a467
import  -/  directory-1.3.0.0@directory-1.3.0.0:System.Directory 23e4e3d52f91c33b21f0667cd90aa164
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network e1c2bc629a33bc735be38b505b5877ff
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket 52f9b9614bf018ecf5fec5f2570dad23
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket.Internal 9f052186d90733a29fe9bf6bf8921c1c
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket.Types 2eb8a83dc42cc86a12e652ce3294cbda
import  -/  stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Concurrent.STM 3662559905a40ae5adbc3e935ac706c8
493a23d9ba0b3ea39166cf4ebc07fd08
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Client.$trModule2
                   Client.$trModule1) -}
b154f2f90201ab0e8b31c936dc31de88
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Client"#) -}
569ca169236544b69c1b299490fcd2fa
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "DFS-0.1.0.0-7idFxpKHsOVL8Ht6XDP4lR"#) -}
c53787b02b8ff8f559db46f98098e4ac
  $wawaitUpdate ::
    Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <L,U(U)><S,U><L,U><L,U(U)><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Foreign.C.Types.CInt)
                   (ww1 :: Network.Socket.Types.Family)
                   (ww2 :: Network.Socket.Types.SocketType)
                   (ww3 :: Network.Socket.Types.ProtocolNumber)
                   (ww4 :: GHC.Prim.MVar#
                             GHC.Prim.RealWorld Network.Socket.Types.SocketStatus)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 letrec {
                   a' :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case Network.$waccept
                            ww
                            ww1
                            ww2
                            ww3
                            ww4
                            s of ds1 { (#,#) ipv ipv1 ->
                     case ipv1 of wild { (,,) handle host port ->
                     case GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            (GHC.CString.unpackAppendCString#
                               "Connection accepted for updating cache: "#
                               (GHC.Base.++ @ GHC.Types.Char host Client.awaitUpdate5))
                            GHC.Types.True
                            ipv of ds2 { (#,#) ipv2 ipv3 ->
                     case Control.Concurrent.forkFinally1
                            @ ()
                            (Client.awaitUpdate2 handle)
                              `cast`
                            (Sym (GHC.Types.N:IO[0] <()>_R))
                            (\ (ds :: Data.Either.Either GHC.Exception.SomeException ())
                               (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             GHC.IO.Handle.hClose1 handle eta)
                              `cast`
                            (<Data.Either.Either GHC.Exception.SomeException ()>_R
                             ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                            ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                     a' ipv4 } } } }
                 } in
                 a' w) -}
0f92dfaac7d7c74f48572d471813b64d
  $wcloseFileonServer ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <S,U><L,U><L,1*U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.IO.Handle.Types.Handle)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        w
                        (GHC.CString.unpackAppendCString# "CLOSE "# w1)
                        GHC.Types.True
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        w
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Client.$wsendClose ipv3 w1 w2 ipv2 } }) -}
b9237614445bd770b8b3e516da4395e0
  $wreadFileandCache ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <S,U><L,U><L,1*U(U)><S,U>, Inline: [0] -}
ff4ce293d62754b1a5769437e0f3afda
  $wsendClose ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><L,U><L,1*U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.connectTo1
                        Client.closeFileonServer6
                        (Network.PortNumber
                           (case Text.Read.readEither6
                                   @ GHC.Integer.Type.Integer
                                   (Text.ParserCombinators.ReadP.run
                                      @ GHC.Integer.Type.Integer
                                      Client.closeFileonServer5
                                      w) of wild {
                              []
                              -> case Client.closeFileonServer4
                                 ret_ty Network.Socket.Types.PortNumber
                                 of {}
                              : x ds
                              -> case ds of wild1 {
                                   []
                                   -> case GHC.Integer.Type.integerToInt x of wild2 { DEFAULT ->
                                      case {__pkg_ccall network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz htons GHC.Prim.Word#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Word# #)}
                                             (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# wild2))
                                             GHC.Prim.realWorld# of wild3 { (#,#) ds1 ds2 ->
                                      (GHC.Word.W16# (GHC.Prim.narrow16Word# ds2))
                                        `cast`
                                      (Sym (Network.Socket.Types.N:PortNumber[0])) } }
                                   : ipv ipv1
                                   -> case Client.closeFileonServer3
                                      ret_ty Network.Socket.Types.PortNumber
                                      of {} } }))
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        ipv1
                        (GHC.CString.unpackAppendCString#
                           "CLOSE "#
                           (GHC.Base.++
                              @ GHC.Types.Char
                              w1
                              (GHC.CString.unpackAppendCString#
                                 " "#
                                 (case w2 of ww2 { GHC.Types.I# ww3 ->
                                  case GHC.Show.$wshowSignedInt
                                         0#
                                         ww3
                                         (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                  GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))))
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.CString.unpackAppendCString#
                      "File "#
                      (GHC.Base.++ @ GHC.Types.Char w1 Client.closeFileonServer2))
                   GHC.Types.True
                   ipv2 } }) -}
a3256589a5e129be394bf12086384bb7
  appendFileandCache ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,U><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.appendFileandCache1
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
a0ce4cb6529e327b31cb81250e7d3af8
  appendFileandCache1 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,U><L,1*U(U)><S,U> -}
2ad7bf374516676caf3f6b0f700c99d2
  appendFileandClose ::
    GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.appendFileandClose1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
3b5af0b6872859877ce9c08a108904f7
  appendFileandClose1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>,
     Unfolding: (\ (fileName :: GHC.Base.String)
                   (toAdd :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        fileName
                        GHC.IO.IOMode.AppendMode
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        ipv1
                        toAdd
                        GHC.Types.False
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.hClose1 ipv1 ipv2 } }) -}
fecd4bd48fda9bcc4a16fa39b089c084
  awaitUpdate :: Network.Socket.Types.Socket -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSLLS(S)),U(U(U),U,U,U(U),U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.awaitUpdate1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
2a1548409d4f8b3e9a22fffa2c4e1e0d
  awaitUpdate1 ::
    Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSLLS(S)),U(U(U),U,U,U(U),U(U))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Client.$wawaitUpdate ww1 ww2 ww3 ww4 ww7 w1 } }) -}
076a012e49f680bd98ee97cd177232db
  awaitUpdate2 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (handleUpdate :: GHC.IO.Handle.Types.Handle)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Client.awaitUpdate9
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        handleUpdate
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 letrec {
                   $wfail :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            Client.awaitUpdate8
                            GHC.Types.True
                            w of ds3 { (#,#) ipv4 ipv5 ->
                     case GHC.IO.Handle.Internals.wantReadableHandle_1
                            @ GHC.Base.String
                            GHC.IO.Handle.Text.hGetLine4
                            handleUpdate
                            GHC.IO.Handle.Text.hGetLine2
                              `cast`
                            (<GHC.IO.Handle.Types.Handle__>_R
                             ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                            ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                     myloop ipv7 ipv6 } }
                   myloop :: GHC.Base.String
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <L,U><S,U> -}
                   = \ (update :: GHC.Base.String)
                       (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            (GHC.CString.unpackAppendCString# "Update: "# update)
                            GHC.Types.True
                            s of ds3 { (#,#) ipv4 ipv5 ->
                     case Data.OldList.words update of wild {
                       [] -> $wfail ipv4
                       : ds ds4
                       -> case GHC.Base.eqString ds Client.awaitUpdate7 of wild1 {
                            GHC.Types.False -> $wfail ipv4
                            GHC.Types.True
                            -> case ds4 of wild2 {
                                 [] -> $wfail ipv4
                                 : fileName ds5
                                 -> case ds5 of wild3 {
                                      []
                                      -> case GHC.IO.Handle.Text.hPutStr2
                                                handleUpdate
                                                (GHC.CString.unpackAppendCString#
                                                   "READY "#
                                                   fileName)
                                                GHC.Types.True
                                                ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                                         Client.awaitUpdate3 fileName handleUpdate ipv6 }
                                      : ipv6 ipv7 -> $wfail ipv4 } } } } }
                 } in
                 myloop ipv3 ipv2 } }) -}
da94168fdc936da848ef5d656f7523c2
  awaitUpdate3 ::
    GHC.Base.String
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><S,U><S,U>,
     Unfolding: (\ (fileName :: GHC.Base.String)
                   (handleServ :: GHC.IO.Handle.Types.Handle)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 letrec {
                   myLoop1 :: [GHC.Types.Char]
                              -> GHC.Prim.State# GHC.Prim.RealWorld
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                     {- Arity: 2, Strictness: <L,U><S,U> -}
                   = \ (fileStr :: [GHC.Types.Char])
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.IO.Handle.Internals.wantReadableHandle_1
                            @ GHC.Base.String
                            GHC.IO.Handle.Text.hGetLine4
                            handleServ
                            GHC.IO.Handle.Text.hGetLine2
                              `cast`
                            (<GHC.IO.Handle.Types.Handle__>_R
                             ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                            eta1 of ds1 { (#,#) ipv ipv1 ->
                     case GHC.Base.eqString ipv1 Client.awaitUpdate6 of wild {
                       GHC.Types.False
                       -> myLoop1
                            (GHC.Base.++
                               @ GHC.Types.Char
                               fileStr
                               (GHC.Base.++ @ GHC.Types.Char ipv1 Client.awaitUpdate5))
                            ipv
                       GHC.Types.True
                       -> case GHC.IO.Handle.Text.hPutStr2
                                 GHC.IO.Handle.FD.stdout
                                 Client.awaitUpdate4
                                 GHC.Types.True
                                 ipv of ds2 { (#,#) ipv2 ipv3 ->
                          (# ipv2, fileStr #) } } }
                 } in
                 case myLoop1
                        (GHC.Types.[] @ GHC.Types.Char)
                        eta of ds1 { (#,#) ipv ipv1 ->
                 System.IO.writeFile1 fileName ipv1 ipv }) -}
e7d5e4ef742d4f3343386b280d944aec
  awaitUpdate4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "File Cache Updated!"#) -}
1fd309f34df9bd5703335c7dca79f897
  awaitUpdate5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
9d3da86c0719d4197a8f6ba095a1ff85
  awaitUpdate6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "!EOF!"#) -}
5803a4f1d6c6437693174251322b74a2
  awaitUpdate7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UPDATE"#) -}
10fa47a76080a911a39c7f115bcefd30
  awaitUpdate8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Not UPDATE as expected"#) -}
2ad0d57904955217f10906a5b7e1e56b
  awaitUpdate9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "waiting for updates"#) -}
b1e25ccde9a669beee54b7acbbcd998d
  closeFileonServer ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 5, Strictness: <S,U><L,U><L,A><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.closeFileonServer1
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
b2fd2f55691c664ad059fd1fb9e0e60d
  closeFileonServer1 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <S,U><L,U><L,A><L,1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ (w :: GHC.IO.Handle.Types.Handle)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Client.$wcloseFileonServer w w1 w3 w4) -}
de26e3fa5d2b8cb94d28df922a8c829e
  closeFileonServer2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " Closed"#) -}
4acf450e958aa6e5e63ff7032248527d
  closeFileonServer3 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
9a06f823db731a57c60f4db212632659
  closeFileonServer4 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
450991925ecbf296773619aca978f8d4
  closeFileonServer5 ::
    Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: (GHC.Read.$fReadInteger3
                   GHC.Read.$fReadInteger_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Integer.Type.Integer
                   (Text.Read.readEither5 @ GHC.Integer.Type.Integer)) -}
ab82f5332406a95d40b748b4c1b59488
  closeFileonServer6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "localhost"#) -}
d93d7d142b7094d6debddb25d40680fc
  lockFile :: GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.lockFile1
                  `cast`
                (<GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e79c2b88ae759effde516b2a2ed06592
  lockFile1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (fileName :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Client.lockFile4
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Network.connectTo1
                        Client.closeFileonServer6
                        Client.lockFile2
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   ipv3
                   (GHC.CString.unpackAppendCString# "LOCK "# fileName)
                   GHC.Types.True
                   ipv2 } }) -}
3dab1de88d3718473ec3fb316005445b
  lockFile2 :: Network.PortID
  {- Strictness: m2,
     Unfolding: (Network.PortNumber Client.lockFile3) -}
f511269024857d827636688e5f075b5e
  lockFile3 :: Network.Socket.Types.PortNumber
  {- Unfolding: (case {__pkg_ccall network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz htons GHC.Prim.Word#
                                                                                                -> GHC.Prim.State#
                                                                                                     GHC.Prim.RealWorld
                                                                                                -> (# GHC.Prim.State#
                                                                                                        GHC.Prim.RealWorld,
                                                                                                      GHC.Prim.Word# #)}
                        5545##
                        GHC.Prim.realWorld# of wild1 { (#,#) ds ds1 ->
                 (GHC.Word.W16# (GHC.Prim.narrow16Word# ds1))
                   `cast`
                 (Sym (Network.Socket.Types.N:PortNumber[0])) }) -}
b2fc59e68dfb6603e390d2da055d8d5a
  lockFile4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "telling lock server im done with file"#) -}
985d3988bf2104ef0bcd0af28a0761de
  openSocket ::
    GHC.Types.Int
    -> GHC.Base.String -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <L,1*U(U)><L,U><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.openSocket1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
fd727e877f574b89bac458133fcdb88a
  openSocket1 ::
    GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,U><L,U(U)><S,U>,
     Unfolding: (\ (portNum :: GHC.Types.Int)
                   (clientName :: GHC.Base.String)
                   (updatePort :: GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.connectTo1
                        Client.closeFileonServer6
                        (Network.PortNumber
                           (case portNum of wild { GHC.Types.I# i ->
                            case {__pkg_ccall network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz htons GHC.Prim.Word#
                                                                                                           -> GHC.Prim.State#
                                                                                                                GHC.Prim.RealWorld
                                                                                                           -> (# GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                 GHC.Prim.Word# #)}
                                   (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# i))
                                   GHC.Prim.realWorld# of wild1 { (#,#) ds ds1 ->
                            (GHC.Word.W16# (GHC.Prim.narrow16Word# ds1))
                              `cast`
                            (Sym (Network.Socket.Types.N:PortNumber[0])) } }))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Client.openSocket3
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Network.listenOn1
                        (Network.PortNumber
                           (case updatePort of wild { GHC.Types.I# i ->
                            case {__pkg_ccall network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz htons GHC.Prim.Word#
                                                                                                           -> GHC.Prim.State#
                                                                                                                GHC.Prim.RealWorld
                                                                                                           -> (# GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                 GHC.Prim.Word# #)}
                                   (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# i))
                                   GHC.Prim.realWorld# of wild1 { (#,#) ds ds3 ->
                            (GHC.Word.W16# (GHC.Prim.narrow16Word# ds3))
                              `cast`
                            (Sym (Network.Socket.Types.N:PortNumber[0])) } }))
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.fork#
                        @ (GHC.Types.IO ())
                        (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         GHC.Prim.catch#
                           @ ()
                           @ GHC.Exception.SomeException
                           (Client.awaitUpdate1 ipv5)
                           GHC.Conc.Sync.childHandler1
                           eta)
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R))
                        ipv4 of ds { (#,#) ipv6 ipv7 ->
                 case Client.openSocket2
                        ipv1
                        clientName
                        updatePort
                        ipv5
                        ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                 (# ipv8, GHC.Tuple.() #) } } } } }) -}
42b329f39469064ff081c05045069495
  openSocket2 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Types.Int
    -> Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S,U><L,U><L,U(U)><L,U(U(U),A,A,A,U(U))><S,U> -}
aff4eeedb24cad208648c6d0c16bd955
  openSocket3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Connected to Directory Server"#) -}
3521168e7f4568ecc07b2f7b97f4a6ac
  portNumLocking :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5545#) -}
0ad7255e5808ca2ba7d981c84c4bd4d3
  readFileandCache ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 5, Strictness: <S,U><L,U><L,A><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.readFileandCache1
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
2c1b1764fba487a91a3c6af7731edb6d
  readFileandCache1 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <S,U><L,U><L,A><L,1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ (w :: GHC.IO.Handle.Types.Handle)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Client.$wreadFileandCache w w1 w3 w4) -}
993aeba7b4b4278d297fcadb2005d4a6
  readFromTerminal :: GHC.Base.String -> GHC.Types.IO GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.readFromTerminal1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
1772d2f4502d30dfb1cf0ab9545b76f4
  readFromTerminal1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U><S,U> -}
ced7ad6280b67241fcc6acde79f7e283
  replaceOrAppend ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 6, Strictness: <S,1*U><L,U><L,U><L,U><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.replaceOrAppend1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
50b54752abb583940cea3f3f50c3430d
  replaceOrAppend1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <S,1*U><L,U><L,U><L,U><L,1*U(U)><S,U>,
     Unfolding: (\ (reply :: GHC.Base.String)
                   (fileName :: GHC.Base.String)
                   (handle :: GHC.IO.Handle.Types.Handle)
                   (clientName :: GHC.Base.String)
                   (updatePort :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Data.OldList.words reply of wild {
                   []
                   -> case Client.replaceOrAppend8
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : ds ds1
                   -> let {
                        $wfail :: GHC.Prim.State# GHC.Prim.RealWorld
                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          let {
                            $wfail1 :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                            = \ (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case ds1 of wild1 {
                                []
                                -> case Client.lockFile1 fileName w1 of ds2 { (#,#) ipv ipv1 ->
                                   GHC.IO.Handle.Text.hPutStr2
                                     GHC.IO.Handle.FD.stdout
                                     Client.replaceOrAppend7
                                     GHC.Types.True
                                     ipv }
                                : ipv ipv1
                                -> case Client.replaceOrAppend8
                                   ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                   of {} }
                          } in
                          case GHC.Base.eqString ds Client.replaceOrAppend6 of wild1 {
                            GHC.Types.False -> $wfail1 w
                            GHC.Types.True
                            -> case ds1 of wild2 {
                                 []
                                 -> case GHC.IO.Handle.Text.hPutStr2
                                           GHC.IO.Handle.FD.stdout
                                           Client.replaceOrAppend5
                                           GHC.Types.True
                                           w of ds2 { (#,#) ipv ipv1 ->
                                    case Client.readFromTerminal1
                                           (GHC.Types.[] @ GHC.Types.Char)
                                           ipv of ds3 { (#,#) ipv2 ipv3 ->
                                    Client.replaceOrAppend4
                                      handle
                                      fileName
                                      ipv3
                                      clientName
                                      updatePort
                                      ipv2 } }
                                 : ipv ipv1 -> $wfail1 w } }
                      } in
                      case GHC.Base.eqString ds Client.replaceOrAppend3 of wild1 {
                        GHC.Types.False -> $wfail eta
                        GHC.Types.True
                        -> case ds1 of wild2 {
                             []
                             -> case GHC.IO.Handle.Text.hPutStr2
                                       GHC.IO.Handle.FD.stdout
                                       Client.replaceOrAppend2
                                       GHC.Types.True
                                       eta of ds2 { (#,#) ipv ipv1 ->
                                case Client.readFromTerminal1
                                       (GHC.Types.[] @ GHC.Types.Char)
                                       ipv of ds3 { (#,#) ipv2 ipv3 ->
                                Client.appendFileandCache1
                                  handle
                                  fileName
                                  ipv3
                                  clientName
                                  updatePort
                                  ipv2 } }
                             : ipv ipv1 -> $wfail eta } } }) -}
c2aa6e702b1e504e44943f4cc2e69265
  replaceOrAppend2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Adding to file conents.\n\
                   \Please enter contents. \n\
                   \Enter !EOF! on final line to indicate the end of the file."#) -}
8fe11aedc7963371006592aca0c45d19
  replaceOrAppend3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Append"#) -}
70e94e6d98b0c1e44a901f8f1b7a945d
  replaceOrAppend4 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,1*U(U)><S,U> -}
60a9f90fcc313dc944be0443c8299860
  replaceOrAppend5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Replacing file conents.\n\
                   \Please enter contents. \n\
                   \Enter !EOF! on final line to indicate the end of the file."#) -}
2efb1714d86a0f5275f3a4919956e644
  replaceOrAppend6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Replace"#) -}
fb5cee7eab60d87c28aa148ae6596382
  replaceOrAppend7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Unrecognised command. aborting write."#) -}
0f8a03bebf376281b82521af3f07935d
  replaceOrAppend8 :: GHC.Types.IO ()
  {- Strictness: x -}
cd13195e22ca7d090584283711f028d4
  requestLock :: GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.requestLock1
                  `cast`
                (<GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
3c6bb75ec182eb232e898131b6cc755e
  requestLock1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (fileName :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.connectTo1
                        Client.closeFileonServer6
                        Client.lockFile2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        ipv1
                        (GHC.CString.unpackAppendCString# "Write "# fileName)
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           "waiting for lock on: "#
                           fileName)
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 Client.requestLock2 ipv1 ipv4 } } }) -}
73044be6125a509fda807ccbe2637d68
  requestLock2 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,U><S,U> -}
ffcc40f3c3f436c79315fd99a5ae27a4
  runConn ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Types.Int
    -> Network.Socket.Types.Socket
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <S,U><L,U><L,U(U)><L,U(U(U),A,A,A,U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.openSocket2
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
84dc5d6770cea76b032fce9048f97d78
  runUpdate :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.awaitUpdate2
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
014377f15c125740bf858f3381657936
  sendClose ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 5, Strictness: <L,U><L,U><L,A><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.sendClose1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
da658e76c1675f6d4771a66ed51084cd
  sendClose1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <L,U><L,U><L,A><L,1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Client.$wsendClose w w1 w3 w4) -}
26777981e196c2f7ddfe3390af8a6f2c
  updateFile ::
    GHC.Base.String -> GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.awaitUpdate3
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.IO.Handle.Types.Handle>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08dc7b38ec19f4a2f156271c61ec9f39
  writeFileandClose ::
    GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.writeFileandClose1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
a8501c9576b47c13e6fa59b2ab63758b
  writeFileandClose1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>,
     Unfolding: (\ (fileName :: GHC.Base.String)
                   (toWrite :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        fileName
                        GHC.IO.IOMode.WriteMode
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        ipv1
                        toWrite
                        GHC.Types.False
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Client.writeFileandClose2
                   GHC.Types.True
                   ipv4 } } }) -}
4a086022d2deda197f42de40e6e3f5a1
  writeFileandClose2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Written to file"#) -}
153e4b024d19dfa17243bc417ce460bf
  writeNewFileandCache ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.replaceOrAppend4
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

