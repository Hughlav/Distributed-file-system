
==================== FINAL INTERFACE ====================
2017-12-13 20:01:52.966727 UTC

interface DFS-0.1.0.0-8jVWvB4mTg1IUkCEEYmdc9:Client 8002
  interface hash: 6edd0b090c4f3bddd150c68d9ec4e622
  ABI hash: 492cb8f127e4ee70ccf1d45657609dcf
  export-list hash: 5c62f4af5e44b74fd19cffa2fe483df1
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4c0aadf0f65e559a2bd2b36fba2fd9f6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Client.appendFileandCache
  Client.appendFileandClose
  Client.awaitUpdate
  Client.closeFileonServer
  Client.lockFile
  Client.openSocket
  Client.portNumLocking
  Client.readFileandCache
  Client.readFromTerminal
  Client.replaceOrAppend
  Client.requestLock
  Client.runConn
  Client.runUpdate
  Client.sendClose
  Client.updateFile
  Client.writeFileandClose
  Client.writeNewFileandCache
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      time-1.6.0.1@time-1.6.0.1 unix-2.7.2.1@unix-2.7.2.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  base-4.9.1.0:Control.Concurrent 2ee6a0a58489520b9a96d8fef10380fa
import  -/  base-4.9.1.0:Control.Exception a76dd9666251322fe34dbcca3a0817bf
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Control.Monad.Fix 1847625fb543f2f5c2510a02760c6b1a
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Typeable 9257e47d10882145c67c5b489965cfb7
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Conc.Sync 8d0a228e5fc4d8c110495066f4d52ea1
import  -/  base-4.9.1.0:GHC.IO.Handle ba98a5b34d78cbf48b41fe58a3735c69
import  -/  base-4.9.1.0:GHC.IO.Handle.FD bf0291e0f2b6c0eca5446f986999f1cc
import  -/  base-4.9.1.0:GHC.IO.Handle.Text b65719f3b262b071ab1aabeb72fc9d8b
import  -/  base-4.9.1.0:GHC.IO.Handle.Types 17aa0e2ab137800e3a31992d780c071f
import  -/  base-4.9.1.0:GHC.IO.IOMode 2f5782f93b12a0d860d6d661b9fb405c
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Exit 068ba078eb20417d7af66db8b8ab4db1
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 0fd5c8559af8bc4b6f38b9cf9ba5a467
import  -/  directory-1.3.0.0@directory-1.3.0.0:System.Directory 23e4e3d52f91c33b21f0667cd90aa164
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network e1c2bc629a33bc735be38b505b5877ff
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket 52f9b9614bf018ecf5fec5f2570dad23
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket.Internal 9f052186d90733a29fe9bf6bf8921c1c
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket.Types 2eb8a83dc42cc86a12e652ce3294cbda
import  -/  stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Concurrent.STM 3662559905a40ae5adbc3e935ac706c8
d892408db1cc3e865d8861c0071fca50
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Client.$trModule2
                   Client.$trModule1) -}
dc5464f3f9d0b3b3e79a64dfe0c525c8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Client"#) -}
a73ba7f3450148e37465fd6070713b6d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "DFS-0.1.0.0-8jVWvB4mTg1IUkCEEYmdc9"#) -}
aa1a9417665f59b444a2848d7ed0bded
  $wawaitUpdate ::
    Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <L,U(U)><S,U><L,U><L,U(U)><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Foreign.C.Types.CInt)
                   (ww1 :: Network.Socket.Types.Family)
                   (ww2 :: Network.Socket.Types.SocketType)
                   (ww3 :: Network.Socket.Types.ProtocolNumber)
                   (ww4 :: GHC.Prim.MVar#
                             GHC.Prim.RealWorld Network.Socket.Types.SocketStatus)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 letrec {
                   a' :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case Network.$waccept
                            ww
                            ww1
                            ww2
                            ww3
                            ww4
                            s of ds1 { (#,#) ipv ipv1 ->
                     case ipv1 of wild { (,,) handle host port ->
                     case GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            (GHC.CString.unpackAppendCString#
                               "Connection accepted for updating cache: "#
                               (GHC.Base.++ @ GHC.Types.Char host Client.awaitUpdate5))
                            GHC.Types.True
                            ipv of ds2 { (#,#) ipv2 ipv3 ->
                     case Control.Concurrent.forkFinally1
                            @ ()
                            (Client.awaitUpdate2 handle)
                              `cast`
                            (Sym (GHC.Types.N:IO[0] <()>_R))
                            (\ (ds :: Data.Either.Either GHC.Exception.SomeException ())
                               (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             GHC.IO.Handle.hClose1 handle eta)
                              `cast`
                            (<Data.Either.Either GHC.Exception.SomeException ()>_R
                             ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                            ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                     a' ipv4 } } } }
                 } in
                 a' w) -}
b00a02cf6ccffca2c6de90b4d86ffa19
  $wcloseFileonServer ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <S,U><L,U><L,1*U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.IO.Handle.Types.Handle)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        w
                        (GHC.CString.unpackAppendCString# "CLOSE "# w1)
                        GHC.Types.True
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        w
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Client.$wsendClose ipv3 w1 w2 ipv2 } }) -}
feb152498035c813e9d6900d620581a2
  $wreadFileandCache ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <S,U><L,U><L,1*U(U)><S,U>, Inline: [0] -}
5a16a69b061be2b879677e5f62ca0411
  $wsendClose ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><L,U><L,1*U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.connectTo1
                        Client.closeFileonServer6
                        (Network.PortNumber
                           (case Text.Read.readEither6
                                   @ GHC.Integer.Type.Integer
                                   (Text.ParserCombinators.ReadP.run
                                      @ GHC.Integer.Type.Integer
                                      Client.closeFileonServer5
                                      w) of wild {
                              []
                              -> case Client.closeFileonServer4
                                 ret_ty Network.Socket.Types.PortNumber
                                 of {}
                              : x ds
                              -> case ds of wild1 {
                                   []
                                   -> case GHC.Integer.Type.integerToInt x of wild2 { DEFAULT ->
                                      case {__pkg_ccall network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz htons GHC.Prim.Word#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Word# #)}
                                             (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# wild2))
                                             GHC.Prim.realWorld# of wild3 { (#,#) ds1 ds2 ->
                                      (GHC.Word.W16# (GHC.Prim.narrow16Word# ds2))
                                        `cast`
                                      (Sym (Network.Socket.Types.N:PortNumber[0])) } }
                                   : ipv ipv1
                                   -> case Client.closeFileonServer3
                                      ret_ty Network.Socket.Types.PortNumber
                                      of {} } }))
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        ipv1
                        (GHC.CString.unpackAppendCString#
                           "CLOSE "#
                           (GHC.Base.++
                              @ GHC.Types.Char
                              w1
                              (GHC.CString.unpackAppendCString#
                                 " "#
                                 (case w2 of ww2 { GHC.Types.I# ww3 ->
                                  case GHC.Show.$wshowSignedInt
                                         0#
                                         ww3
                                         (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                  GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))))
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.CString.unpackAppendCString#
                      "File "#
                      (GHC.Base.++ @ GHC.Types.Char w1 Client.closeFileonServer2))
                   GHC.Types.True
                   ipv2 } }) -}
311b9018dad9279c345b26b716bf8a64
  appendFileandCache ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,U><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.appendFileandCache1
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
879cd6e86364437583f82b121839ff9e
  appendFileandCache1 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,U><L,1*U(U)><S,U> -}
24cec2e81989c2d302adea7ede9864c0
  appendFileandClose ::
    GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.appendFileandClose1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
5b4740b657c78a0143e26cbc1e87fbf9
  appendFileandClose1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>,
     Unfolding: (\ (fileName :: GHC.Base.String)
                   (toAdd :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        fileName
                        GHC.IO.IOMode.AppendMode
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        ipv1
                        toAdd
                        GHC.Types.False
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.hClose1 ipv1 ipv2 } }) -}
99b68a832c8297ea04cf05c143f86a4e
  awaitUpdate :: Network.Socket.Types.Socket -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSLLS(S)),U(U(U),U,U,U(U),U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.awaitUpdate1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
548137f76dbd5ab2dcf17820bc183eab
  awaitUpdate1 ::
    Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSLLS(S)),U(U(U),U,U,U(U),U(U))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Client.$wawaitUpdate ww1 ww2 ww3 ww4 ww7 w1 } }) -}
74a9916f441f5caf2ecc06fcba736229
  awaitUpdate2 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (handleUpdate :: GHC.IO.Handle.Types.Handle)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Client.awaitUpdate9
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        handleUpdate
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 letrec {
                   $wfail :: GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            Client.awaitUpdate8
                            GHC.Types.True
                            w of ds3 { (#,#) ipv4 ipv5 ->
                     case GHC.IO.Handle.Internals.wantReadableHandle_1
                            @ GHC.Base.String
                            GHC.IO.Handle.Text.hGetLine4
                            handleUpdate
                            GHC.IO.Handle.Text.hGetLine2
                              `cast`
                            (<GHC.IO.Handle.Types.Handle__>_R
                             ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                            ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                     myloop ipv7 ipv6 } }
                   myloop :: GHC.Base.String
                             -> GHC.Prim.State# GHC.Prim.RealWorld
                             -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <L,U><S,U> -}
                   = \ (update :: GHC.Base.String)
                       (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            (GHC.CString.unpackAppendCString# "Update: "# update)
                            GHC.Types.True
                            s of ds3 { (#,#) ipv4 ipv5 ->
                     case Data.OldList.words update of wild {
                       [] -> $wfail ipv4
                       : ds ds4
                       -> case GHC.Base.eqString ds Client.awaitUpdate7 of wild1 {
                            GHC.Types.False -> $wfail ipv4
                            GHC.Types.True
                            -> case ds4 of wild2 {
                                 [] -> $wfail ipv4
                                 : fileName ds5
                                 -> case ds5 of wild3 {
                                      []
                                      -> case GHC.IO.Handle.Text.hPutStr2
                                                handleUpdate
                                                (GHC.CString.unpackAppendCString#
                                                   "READY "#
                                                   fileName)
                                                GHC.Types.True
                                                ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                                         Client.awaitUpdate3 fileName handleUpdate ipv6 }
                                      : ipv6 ipv7 -> $wfail ipv4 } } } } }
                 } in
                 myloop ipv3 ipv2 } }) -}
588e52eb18a8da2865ec7d91eba588a8
  awaitUpdate3 ::
    GHC.Base.String
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><S,U><S,U>,
     Unfolding: (\ (fileName :: GHC.Base.String)
                   (handleServ :: GHC.IO.Handle.Types.Handle)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 letrec {
                   myLoop1 :: [GHC.Types.Char]
                              -> GHC.Prim.State# GHC.Prim.RealWorld
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
                     {- Arity: 2, Strictness: <L,U><S,U> -}
                   = \ (fileStr :: [GHC.Types.Char])
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.IO.Handle.Internals.wantReadableHandle_1
                            @ GHC.Base.String
                            GHC.IO.Handle.Text.hGetLine4
                            handleServ
                            GHC.IO.Handle.Text.hGetLine2
                              `cast`
                            (<GHC.IO.Handle.Types.Handle__>_R
                             ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                            eta1 of ds1 { (#,#) ipv ipv1 ->
                     case GHC.Base.eqString ipv1 Client.awaitUpdate6 of wild {
                       GHC.Types.False
                       -> myLoop1
                            (GHC.Base.++
                               @ GHC.Types.Char
                               fileStr
                               (GHC.Base.++ @ GHC.Types.Char ipv1 Client.awaitUpdate5))
                            ipv
                       GHC.Types.True
                       -> case GHC.IO.Handle.Text.hPutStr2
                                 GHC.IO.Handle.FD.stdout
                                 Client.awaitUpdate4
                                 GHC.Types.True
                                 ipv of ds2 { (#,#) ipv2 ipv3 ->
                          (# ipv2, fileStr #) } } }
                 } in
                 case myLoop1
                        (GHC.Types.[] @ GHC.Types.Char)
                        eta of ds1 { (#,#) ipv ipv1 ->
                 System.IO.writeFile1 fileName ipv1 ipv }) -}
13b080689d03e65915a9b28c6daa2fb9
  awaitUpdate4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "File Cache Updated!"#) -}
01aa1b976fdc2fa6d5e0d3313eafd727
  awaitUpdate5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
39e9c8ab27c6b8fe74e14ed8194f1e09
  awaitUpdate6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "!EOF!"#) -}
40a378a44b5dae049c30ed99ac228f00
  awaitUpdate7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UPDATE"#) -}
30463ee1905a26ef79099609f1585a29
  awaitUpdate8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Not UPDATE as expected"#) -}
6c6b20b63549b716f7e81fae8d22c8f1
  awaitUpdate9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "waiting for updates"#) -}
6f95c1d995e841d05e31902d814356d1
  closeFileonServer ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 5, Strictness: <S,U><L,U><L,A><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.closeFileonServer1
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
212d55d4b90bf8b75632c38e3462cd20
  closeFileonServer1 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <S,U><L,U><L,A><L,1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ (w :: GHC.IO.Handle.Types.Handle)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Client.$wcloseFileonServer w w1 w3 w4) -}
957f39b4681a5461b8a6653cb0aa69d1
  closeFileonServer2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " Closed"#) -}
1e04398f65c9def8743b5539f3c7fc92
  closeFileonServer3 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
6eb4e3d502a7684eaaed5dd567180cd9
  closeFileonServer4 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
dfb3c12980b4dfbe3267aa5a961e0b6c
  closeFileonServer5 ::
    Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: (GHC.Read.$fReadInteger3
                   GHC.Read.$fReadInteger_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Integer.Type.Integer
                   (Text.Read.readEither5 @ GHC.Integer.Type.Integer)) -}
6b8a008a53a5e428569e4bdf358e7b6c
  closeFileonServer6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "localhost"#) -}
f5806067cf161c102682fcb80614b5d4
  lockFile :: GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.lockFile1
                  `cast`
                (<GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
ec2c630953c08d0c79b15257e8222fbc
  lockFile1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (fileName :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Client.lockFile4
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Network.connectTo1
                        Client.closeFileonServer6
                        Client.lockFile2
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   ipv3
                   (GHC.CString.unpackAppendCString# "LOCK "# fileName)
                   GHC.Types.True
                   ipv2 } }) -}
cd47f66632c7fe6c60cfcec6f63380a2
  lockFile2 :: Network.PortID
  {- Strictness: m2,
     Unfolding: (Network.PortNumber Client.lockFile3) -}
b8a20e7cd6e1e9ae7e560e09ae2045a1
  lockFile3 :: Network.Socket.Types.PortNumber
  {- Unfolding: (case {__pkg_ccall network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz htons GHC.Prim.Word#
                                                                                                -> GHC.Prim.State#
                                                                                                     GHC.Prim.RealWorld
                                                                                                -> (# GHC.Prim.State#
                                                                                                        GHC.Prim.RealWorld,
                                                                                                      GHC.Prim.Word# #)}
                        5545##
                        GHC.Prim.realWorld# of wild1 { (#,#) ds ds1 ->
                 (GHC.Word.W16# (GHC.Prim.narrow16Word# ds1))
                   `cast`
                 (Sym (Network.Socket.Types.N:PortNumber[0])) }) -}
a3c48b44038f2bf6a4ebec1628261361
  lockFile4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "telling lock server im done with file"#) -}
1a8cfe48f47a3347f986d7dc843817eb
  openSocket ::
    GHC.Types.Int
    -> GHC.Base.String -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <L,1*U(U)><L,U><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.openSocket1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8b30d4f92beeb4427753787b893b13e8
  openSocket1 ::
    GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,U><L,U(U)><S,U>,
     Unfolding: (\ (portNum :: GHC.Types.Int)
                   (clientName :: GHC.Base.String)
                   (updatePort :: GHC.Types.Int)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.connectTo1
                        Client.closeFileonServer6
                        (Network.PortNumber
                           (case portNum of wild { GHC.Types.I# i ->
                            case {__pkg_ccall network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz htons GHC.Prim.Word#
                                                                                                           -> GHC.Prim.State#
                                                                                                                GHC.Prim.RealWorld
                                                                                                           -> (# GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                 GHC.Prim.Word# #)}
                                   (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# i))
                                   GHC.Prim.realWorld# of wild1 { (#,#) ds ds1 ->
                            (GHC.Word.W16# (GHC.Prim.narrow16Word# ds1))
                              `cast`
                            (Sym (Network.Socket.Types.N:PortNumber[0])) } }))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Client.openSocket3
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Network.listenOn1
                        (Network.PortNumber
                           (case updatePort of wild { GHC.Types.I# i ->
                            case {__pkg_ccall network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz htons GHC.Prim.Word#
                                                                                                           -> GHC.Prim.State#
                                                                                                                GHC.Prim.RealWorld
                                                                                                           -> (# GHC.Prim.State#
                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                 GHC.Prim.Word# #)}
                                   (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# i))
                                   GHC.Prim.realWorld# of wild1 { (#,#) ds ds3 ->
                            (GHC.Word.W16# (GHC.Prim.narrow16Word# ds3))
                              `cast`
                            (Sym (Network.Socket.Types.N:PortNumber[0])) } }))
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.fork#
                        @ (GHC.Types.IO ())
                        (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         GHC.Prim.catch#
                           @ ()
                           @ GHC.Exception.SomeException
                           (Client.awaitUpdate1 ipv5)
                           GHC.Conc.Sync.childHandler1
                           eta)
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R))
                        ipv4 of ds { (#,#) ipv6 ipv7 ->
                 case Client.openSocket2
                        ipv1
                        clientName
                        updatePort
                        ipv5
                        ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                 (# ipv8, GHC.Tuple.() #) } } } } }) -}
b0e4ea372d22a21faa1a9c1225f5a75e
  openSocket2 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Types.Int
    -> Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S,U><L,U><L,U(U)><L,U(U(U),A,A,A,U(U))><S,U> -}
929426defbee8b68dc420ad0087717d5
  openSocket3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Connected to Directory Server"#) -}
5763e58281635025dfd0fd07d403914b
  portNumLocking :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5545#) -}
138d4205c6bf62c9ce7d0e40c1fbacd4
  readFileandCache ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 5, Strictness: <S,U><L,U><L,A><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.readFileandCache1
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
2d3ddbb751aafbcb9cb7c13a74052bfb
  readFileandCache1 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <S,U><L,U><L,A><L,1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ (w :: GHC.IO.Handle.Types.Handle)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Client.$wreadFileandCache w w1 w3 w4) -}
33aeee70d80fa475fe0e58d34bf9f1b0
  readFromTerminal :: GHC.Base.String -> GHC.Types.IO GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.readFromTerminal1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
845d2d7e13795fc5938861cdad0ddc88
  readFromTerminal1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U><S,U> -}
07ada3b58f765bf96e94484ce11b7a52
  replaceOrAppend ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 6, Strictness: <S,1*U><L,U><L,U><L,U><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.replaceOrAppend1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
c8b82e2b0050dc4539385649610390b0
  replaceOrAppend1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <S,1*U><L,U><L,U><L,U><L,1*U(U)><S,U>,
     Unfolding: (\ (reply :: GHC.Base.String)
                   (fileName :: GHC.Base.String)
                   (handle :: GHC.IO.Handle.Types.Handle)
                   (clientName :: GHC.Base.String)
                   (updatePort :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Data.OldList.words reply of wild {
                   []
                   -> case Client.replaceOrAppend8
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : ds ds1
                   -> let {
                        $wfail :: GHC.Prim.State# GHC.Prim.RealWorld
                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          let {
                            $wfail1 :: GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                            = \ (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case ds1 of wild1 {
                                []
                                -> case Client.lockFile1 fileName w1 of ds2 { (#,#) ipv ipv1 ->
                                   GHC.IO.Handle.Text.hPutStr2
                                     GHC.IO.Handle.FD.stdout
                                     Client.replaceOrAppend7
                                     GHC.Types.True
                                     ipv }
                                : ipv ipv1
                                -> case Client.replaceOrAppend8
                                   ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                   of {} }
                          } in
                          case GHC.Base.eqString ds Client.replaceOrAppend6 of wild1 {
                            GHC.Types.False -> $wfail1 w
                            GHC.Types.True
                            -> case ds1 of wild2 {
                                 []
                                 -> case GHC.IO.Handle.Text.hPutStr2
                                           GHC.IO.Handle.FD.stdout
                                           Client.replaceOrAppend5
                                           GHC.Types.True
                                           w of ds2 { (#,#) ipv ipv1 ->
                                    case Client.readFromTerminal1
                                           (GHC.Types.[] @ GHC.Types.Char)
                                           ipv of ds3 { (#,#) ipv2 ipv3 ->
                                    Client.replaceOrAppend4
                                      handle
                                      fileName
                                      ipv3
                                      clientName
                                      updatePort
                                      ipv2 } }
                                 : ipv ipv1 -> $wfail1 w } }
                      } in
                      case GHC.Base.eqString ds Client.replaceOrAppend3 of wild1 {
                        GHC.Types.False -> $wfail eta
                        GHC.Types.True
                        -> case ds1 of wild2 {
                             []
                             -> case GHC.IO.Handle.Text.hPutStr2
                                       GHC.IO.Handle.FD.stdout
                                       Client.replaceOrAppend2
                                       GHC.Types.True
                                       eta of ds2 { (#,#) ipv ipv1 ->
                                case Client.readFromTerminal1
                                       (GHC.Types.[] @ GHC.Types.Char)
                                       ipv of ds3 { (#,#) ipv2 ipv3 ->
                                Client.appendFileandCache1
                                  handle
                                  fileName
                                  ipv3
                                  clientName
                                  updatePort
                                  ipv2 } }
                             : ipv ipv1 -> $wfail eta } } }) -}
ad5e0801cc5eff0c37236b00ecee2fc0
  replaceOrAppend2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Adding to file conents.\n\
                   \Please enter contents. \n\
                   \Enter !EOF! on final line to indicate the end of the file."#) -}
8c7910aea4fc660d07b3f0f172b1ea1e
  replaceOrAppend3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Append"#) -}
bb7b389917d3dc64f2fb49b6fe69a16b
  replaceOrAppend4 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,1*U(U)><S,U> -}
8d69ba63e2a876a0fc65db5e753b290a
  replaceOrAppend5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Replacing file conents.\n\
                   \Please enter contents. \n\
                   \Enter !EOF! on final line to indicate the end of the file."#) -}
5f8f4b3fbcb543cc7b5c214246d421eb
  replaceOrAppend6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Replace"#) -}
74c588205c52fa5632c083d5b1065c86
  replaceOrAppend7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Unrecognised command. aborting write."#) -}
e6b61ea426db964b894230c8fbadc50a
  replaceOrAppend8 :: GHC.Types.IO ()
  {- Strictness: x -}
1fd9d9ca3132daa469c8fa60d59b6608
  requestLock :: GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.requestLock1
                  `cast`
                (<GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
c991c8f255af4a174af77b5190722d13
  requestLock1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (fileName :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.connectTo1
                        Client.closeFileonServer6
                        Client.lockFile2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        ipv1
                        (GHC.CString.unpackAppendCString# "Write "# fileName)
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           "waiting for lock on: "#
                           fileName)
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 Client.requestLock2 ipv1 ipv4 } } }) -}
286d299503c7998157914c8425fd9559
  requestLock2 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,U><S,U> -}
ee6c5bc41efe37a36b270cb56ca74604
  runConn ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Types.Int
    -> Network.Socket.Types.Socket
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <S,U><L,U><L,U(U)><L,U(U(U),A,A,A,U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.openSocket2
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d7cabf931bc7041f05451e2a7001cd8f
  runUpdate :: GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.awaitUpdate2
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
6caa41bdbb61a50796f5e6053326b3b5
  sendClose ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 5, Strictness: <L,U><L,U><L,A><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.sendClose1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
5893284de7a258c03c1d9432a15fd26e
  sendClose1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <L,U><L,U><L,A><L,1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Client.$wsendClose w w1 w3 w4) -}
3cb0aacc5f5da0bdb5f71b8048c77d2c
  updateFile ::
    GHC.Base.String -> GHC.IO.Handle.Types.Handle -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.awaitUpdate3
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.IO.Handle.Types.Handle>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
cc5f462199ccb01d6698dde644b00b43
  writeFileandClose ::
    GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.writeFileandClose1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
0b7334c7ce92610e5f60221e7240431e
  writeFileandClose1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>,
     Unfolding: (\ (fileName :: GHC.Base.String)
                   (toWrite :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        fileName
                        GHC.IO.IOMode.WriteMode
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        ipv1
                        toWrite
                        GHC.Types.False
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.hClose1 ipv1 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Client.writeFileandClose2
                   GHC.Types.True
                   ipv4 } } }) -}
1a4b6e009e5d744883bacbe905b0e84f
  writeFileandClose2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Written to file"#) -}
d96b021bbb17af36bae6e783064f946c
  writeNewFileandCache ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Client.replaceOrAppend4
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

